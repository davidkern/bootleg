version: 2.1

default_version: &default_version 1.6.6
default_steps: &default_steps
  - run: mix test --exclude functional
  - store_test_results:
      path: ~/bootleg/_build/test/lib/bootleg
general:
  branches:
    ignore:
      - gh-pages
defaults: &defaults
  working_directory: ~/bootleg
cache_files: &cache_files
  - _build
  - deps
  - ~/.mix
jobs:
  build:
    <<: *defaults
    parameters:
      version:
        description: Elixir version
        type: string
        default: *default_version
      execute:
        description: What steps to execute after build
        type: steps
        default: *default_steps

    parallelism: 1
    docker:
      - image: elixir:<< parameters.version >>
        environment: # environment variables for primary container
          SHELL: /bin/bash
    steps:
      - checkout

      - run: mix local.hex --force
      - run: mix local.rebar --force

      - restore_cache: # restores saved mix cache
          name: Restore mix cache
          keys: # list of cache keys, in decreasing specificity
            - build-v<< parameters.version >>-{{ .Branch }}-{{ checksum "mix.lock" }}
            - build-v<< parameters.version >>-{{ .Branch }}
            - build-v<< parameters.version >>

      - run: mix do deps.get, deps.compile, compile

      - save_cache: # generate and store cache so `restore_cache` works
          name: Save build cache (3)
          key: build-v<< parameters.version >>-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: *cache_files
      - save_cache: # make another less specific cache
          name: Save build cache (2)
          key: build-v<< parameters.version >>-{{ .Branch }}
          paths: *cache_files
      - save_cache: # and one more for good measure
          name: Save build cache (1)
          key: build-v<< parameters.version >>
          paths: *cache_files

      - steps: << parameters.execute >>

  functional:
    <<: *defaults
    machine:
      image: circleci/classic:latest
    steps:
      - checkout
      - run:
          name: Setup Environment Variables
          command: |
            echo 'export INSTALL_PATH="$HOME/dependencies"' >> $BASH_ENV
            echo 'export PATH="$INSTALL_PATH/bin:$PATH"' >> $BASH_ENV
            echo 'export VERSION_CIRCLECI=2' >> $BASH_ENV
            echo 'export COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN' >> $BASH_ENV
            echo 'export CI_PULL_REQUEST=$CIRCLE_PR_NUMBER' >> $BASH_ENV
      - restore_cache:
          name: Restore environment cache
          key: environment-cache-{{ checksum "script/ci/prepare.sh" }}-{{ arch }}
      - run:
          name: Install Elixir
          command: script/ci/prepare.sh
      - save_cache:
          name: Save environment cache 
          key: environment-cache-{{ checksum "script/ci/prepare.sh" }}-{{ arch }}
          paths:
            - ~/dependencies
      - restore_cache:
          name: Restore dependency cache
          key: dependencies-cache-{{ checksum "script/ci/prepare.sh" }}-{{ checksum "mix.lock" }}-{{ arch }}
      - run:
          name: Preparing dependencies
          command: |
            mix local.hex --force
            mix local.rebar --force
            mix deps.get;
            mix deps.compile;
      - save_cache:
          name: Save dependency cache
          key: dependencies-cache-{{ checksum "script/ci/prepare.sh" }}-{{ checksum "mix.lock" }}-{{ arch }}
          paths:
            - ~/.mix
            - _build
            - deps
      - run: mix compile
      - run: mix coveralls.html
      - store_test_results:
          path: ~/bootleg/_build/test/lib/bootleg
      - store_artifacts:
          path: cover
workflows:
  version: 2.1
  all_versions:
    jobs:
      - build:
          name: "Test in Elixir 1.6.6"
          version: 1.6.6
      - build:
          name: "Test in Elixir 1.8.2"
          version: 1.8.2
      - build:
          name: "Test in Elixir 1.9.0"
          version: 1.9.0
      - build:
          name: "Test in Elixir 1.10.4"
          version: 1.10.4
  code_quality:
    jobs:
      - build:
          name: "Code quality and style checks"
          execute:
            - run: mix do format --check-formatted, credo --strict
      - build:
          name: "Dialyzer type checks"
          execute:
            - restore_cache:  # restores saved plt cache
                keys:
                  - dialyzer
            - run: mix dialyzer --halt-exit-status
            - save_cache:
                key: dialyzer
                paths: "_build/test/dialyxir*.plt"
  validate_functional:
    jobs:
      - functional:
          name: "Functional tests"
